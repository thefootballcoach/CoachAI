# Production-optimized Dockerfile for bundle size reduction
FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    ffmpeg \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with production optimizations
RUN npm ci --only=production --no-audit --no-fund \
    && npm cache clean --force

# Copy source code (excluding development files via .dockerignore)
COPY . .

# Build stage with size optimizations
FROM base AS builder

# Install dev dependencies for build
RUN npm ci --no-audit --no-fund

# Set production environment variables
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false

# Run optimized build
RUN chmod +x optimize-build.sh && ./optimize-build.sh

# Production stage - ultra-minimal
FROM node:20-alpine AS production

# Install only runtime dependencies
RUN apk add --no-cache ffmpeg && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy only production files
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package*.json ./

# Install only production dependencies
RUN npm ci --only=production --no-audit --no-fund \
    && npm cache clean --force \
    && rm -rf ~/.npm

# Remove unnecessary files to minimize size
RUN find node_modules -name "*.md" -delete \
    && find node_modules -name "*.txt" -delete \
    && find node_modules -name "CHANGELOG*" -delete \
    && find node_modules -name "LICENSE*" -delete \
    && find node_modules -name "README*" -delete \
    && find node_modules -name "*.map" -delete \
    && find node_modules -name "*.d.ts" -delete \
    && rm -rf node_modules/*/test \
    && rm -rf node_modules/*/tests \
    && rm -rf node_modules/*/__tests__ \
    && rm -rf node_modules/*/docs \
    && rm -rf node_modules/*/examples

# Create non-root user
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001

# Set ownership
RUN chown -R nextjs:nodejs /app
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

EXPOSE 5000

CMD ["node", "dist/index.js"]